{"version":3,"sources":["utils/fetchClient.ts","reducer.tsx","components/PostsList.tsx","api.ts","components/Loader/Loader.tsx","components/Field.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","initialState","selectedUser","activeList","error","listPostsUser","load","type","active","selectedPost","commentsPost","activeForm","reducer","state","action","user","show","posts","objectLoad","post","comments","GlobalContext","createContext","obj","StateProvider","children","useReducer","dispatch","Provider","value","PostsList","useContext","useEffect","id","renderListPosts","useMemo","map","className","classNames","onClick","selectPost","length","Loader","Field","setValue","textError","title","valideFrom","setValidForm","placeholder","changeHandler","event","target","result","Object","entries","el","fromEntries","htmlFor","name","onChange","NewCommentForm","getComments","useState","setName","email","setEmail","text","setText","clearForm","onSubmit","preventDefault","valid","values","some","postId","PostDetails","getCommentsPost","deleteCommentHandler","deleteComment","filter","renderCommentForm","renderListComments","comment","href","UserSelector","listUsers","setListUsers","renderListUsers","selectUser","role","App","closeDrobdownMenu","parentNode","document","addEventListener","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.11573a78.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { createContext, useReducer } from 'react';\nimport { Comment } from './types/Comment';\nimport { Error } from './types/Error';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\n\ntype State = {\n  selectedUser: User | null,\n  activeList: boolean,\n  error: Error | null,\n  listPostsUser: Post[] | [],\n  load: { type: string, active: boolean },\n  selectedPost: Post | null,\n  commentsPost: Comment[] | [],\n  activeForm: boolean,\n};\n\ntype Action =\n  { type: 'selectUser', user: User }\n  | { type: 'active', show: boolean }\n  | { type: 'error', error: Error | null }\n  | { type: 'postsUser', posts: Post[] }\n  | { type: 'loadData', objectLoad: { type: string, active: boolean } }\n  | { type: 'selectPost', post: Post | null }\n  | { type: 'commentsPost', comments: Comment[] }\n  | { type: 'activeForm', active: boolean };\n\nexport const initialState: State = {\n  selectedUser: null,\n  activeList: false,\n  error: null,\n  listPostsUser: [],\n  load: { type: '', active: false },\n  selectedPost: null,\n  commentsPost: [],\n  activeForm: false,\n};\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'selectUser':\n      return {\n        ...state,\n        selectedUser: action.user,\n      };\n    case 'active':\n      return {\n        ...state,\n        activeList: action.show,\n      };\n    case 'error':\n      return {\n        ...state,\n        error: action.error,\n      };\n    case 'postsUser':\n      return {\n        ...state,\n        listPostsUser: action.posts,\n      };\n    case 'loadData':\n      return {\n        ...state,\n        load: action.objectLoad,\n      };\n    case 'selectPost':\n      return {\n        ...state,\n        selectedPost: action.post,\n      };\n    case 'commentsPost':\n      return {\n        ...state,\n        commentsPost: action.comments,\n      };\n    case 'activeForm':\n      return {\n        ...state,\n        activeForm: action.active,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const GlobalContext = createContext<\n[State, React.Dispatch<Action>]\n>([initialState, (obj:Action) => obj]);\n\nconst StateProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <GlobalContext.Provider value={[state, dispatch]}>\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n\nexport default StateProvider;\n","import classNames from 'classnames';\nimport React, { useContext, useEffect, useMemo } from 'react';\nimport { getPostsUser } from '../api';\nimport { GlobalContext } from '../reducer';\nimport { Error } from '../types/Error';\nimport { Post } from '../types/Post';\n\nexport const PostsList: React.FC = () => {\n  const [state, dispatch] = useContext(GlobalContext);\n\n  useEffect(() => {\n    if (state.selectedUser) {\n      dispatch(\n        { type: 'loadData', objectLoad: { type: 'postsUser', active: true } },\n      );\n      getPostsUser(state.selectedUser.id).then((request: Post[] | Error) => {\n        if ('error' in request) {\n          dispatch(\n            {\n              type: 'loadData',\n              objectLoad: { type: 'postsUser', active: false },\n            },\n          );\n          dispatch({ type: 'error', error: { ...request, type: 'listPosts' } });\n        } else {\n          dispatch({ type: 'postsUser', posts: request });\n          dispatch(\n            {\n              type: 'loadData',\n              objectLoad:\n                { type: 'postsUser', active: false },\n            },\n          );\n        }\n      });\n    }\n  }, [state.selectedUser]);\n\n  const selectPost = (post: Post) => {\n    if (state.selectedPost === post) {\n      dispatch({ type: 'selectPost', post: null });\n      dispatch({ type: 'activeForm', active: false });\n    } else {\n      dispatch({ type: 'selectPost', post });\n      dispatch({ type: 'activeForm', active: false });\n    }\n  };\n\n  const renderListPosts = useMemo(() => {\n    return state.listPostsUser.map((post: Post) => {\n      return (\n        <tr data-cy=\"Post\" key={post.id}>\n          <td data-cy=\"PostId\">{post.id}</td>\n\n          <td data-cy=\"PostTitle\">\n            {post.body}\n          </td>\n\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              type=\"button\"\n              data-cy=\"PostButton\"\n              className={classNames('button is-link', {\n                'is-light': state.selectedPost !== post,\n              })}\n              onClick={() => selectPost(post)}\n            >\n              { state.selectedPost === post ? 'Close' : 'Open'}\n            </button>\n          </td>\n        </tr>\n      );\n    });\n  }, [state.listPostsUser, state.selectedPost]);\n\n  return (\n    state.listPostsUser.length > 0 ? (\n      <div data-cy=\"PostsList\">\n        <p className=\"title\">Posts:</p>\n\n        <table\n          className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n        >\n          <thead>\n            <tr className=\"has-background-link-light\">\n              <th>#</th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {renderListPosts}\n          </tbody>\n        </table>\n      </div>\n    ) : <></>\n  );\n};\n","import { client } from './utils/fetchClient';\nimport { Comment } from './types/Comment';\nimport { User } from './types/User';\nimport { Error } from './types/Error';\nimport { Post } from './types/Post';\n\nexport const getUsersList = () => {\n  return client.get<User[] | Error>('/users');\n};\n\nexport const getPostsUser = (id:number) => {\n  return client.get<Post[] | Error>(`/posts?userId=${id}`);\n};\n\nexport const getPost = (id: number) => {\n  return client.get<Post | Error>(`/posts/${id}`);\n};\n\nexport const getCommentsPost = (id: number) => {\n  return client.get<Comment[] | Error>(`/comments?postId=${id}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (data: Comment) => {\n  return client.post<Comment | Error>('/comments', data);\n};\n","import './Loader.scss';\n\nexport const Loader = () => {\n  return (\n    <div className=\"Loader\" data-cy=\"Loader\">\n      <div className=\"Loader__content\" />\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport { Valid } from '../types/Valid';\n\ntype Props = {\n  value: string,\n  setValue: (val: string) => void,\n  error: boolean,\n  textError: string,\n  title: string,\n  valideFrom: Valid,\n  setValidForm: (obj: Valid) => void\n  type: string,\n  placeholder: string\n};\n\nexport const Field: React.FC<Props> = ({\n  value,\n  setValue,\n  error,\n  textError,\n  title,\n  valideFrom,\n  setValidForm,\n  type,\n  placeholder,\n}) => {\n  const changeHandler = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    setValue(event.target.value);\n    const array = Object.entries(valideFrom);\n\n    const result = array.map((el) => (el[0] === type ? [type, true] : el));\n\n    setValidForm(Object.fromEntries(result) as Valid);\n  };\n\n  return (\n    <div className=\"field\" data-cy=\"NameField\">\n      <label className=\"label\" htmlFor=\"comment-author-name\">\n        {title}\n      </label>\n\n      {type === 'text' ? (\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder={placeholder}\n            className={classNames('textarea', {\n              'is-danger': !error,\n            })}\n            value={value}\n            onChange={changeHandler}\n          />\n        </div>\n      ) : (\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder={placeholder}\n            className={classNames('input', {\n              'is-danger': !error,\n            })}\n            value={value}\n            onChange={changeHandler}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!error && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n      )}\n\n      {!error && (\n        <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n          {textError}\n        </p>\n      )}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useContext, useState } from 'react';\nimport { addComment } from '../api';\nimport { GlobalContext } from '../reducer';\nimport { Comment } from '../types/Comment';\nimport { Error } from '../types/Error';\nimport { Field } from './Field';\n\ntype Props = {\n  getComments: (id:number) => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ getComments }) => {\n  const [state, dispatch] = useContext(GlobalContext);\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n  const [valideFrom, setValidForm] = useState(\n    { name: true, email: true, text: true },\n  );\n\n  const clearForm = () => {\n    setName('');\n    setEmail('');\n    setText('');\n    setValidForm({ name: true, email: true, text: true });\n  };\n\n  const addCommentSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const valid = { ...valideFrom };\n\n    if (!name) {\n      valid.name = false;\n    }\n\n    if (!email) {\n      valid.email = false;\n    }\n\n    if (!text) {\n      valid.text = false;\n    }\n\n    if (!Object.values(valid).some((el: boolean) => el === false)) {\n      if (state.selectedPost && state.selectedUser) {\n        dispatch({\n          type: 'loadData',\n          objectLoad: { type: 'addComments', active: true },\n        });\n        addComment({\n          id: 0,\n          postId: state.selectedPost.id,\n          name,\n          email,\n          body: text,\n        }).then((request: Comment | Error) => {\n          if ('message' in request) {\n            dispatch({\n              type: 'error',\n              error: { ...request, type: 'comments' },\n            });\n            dispatch({\n              type: 'loadData',\n              objectLoad: { type: 'addComments', active: false },\n            });\n          }\n\n          if (state.selectedPost) {\n            getComments(state.selectedPost.id);\n            clearForm();\n            dispatch({\n              type: 'loadData',\n              objectLoad: { type: 'addComments', active: false },\n            });\n          }\n        });\n      }\n    }\n\n    setValidForm(valid);\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\" onSubmit={addCommentSubmit}>\n      <Field\n        value={name}\n        setValue={setName}\n        error={valideFrom.name}\n        textError=\"Name is required\"\n        title=\"Author Name\"\n        valideFrom={valideFrom}\n        setValidForm={setValidForm}\n        type=\"name\"\n        placeholder=\"Name Surname\"\n      />\n      <Field\n        value={email}\n        setValue={setEmail}\n        error={valideFrom.email}\n        textError=\"Email is required\"\n        title=\"Author Email\"\n        valideFrom={valideFrom}\n        setValidForm={setValidForm}\n        type=\"email\"\n        placeholder=\"email@test.com\"\n      />\n      <Field\n        value={text}\n        setValue={setText}\n        error={valideFrom.text}\n        textError=\"Enter some text\"\n        title=\"Comment Text\"\n        valideFrom={valideFrom}\n        setValidForm={setValidForm}\n        type=\"text\"\n        placeholder=\"Type comment here\"\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={\n              classNames('button is-link', {\n                'is-loading': state.load.type === 'addComments'\n                && state.load.active,\n              })\n            }\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={clearForm}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useContext, useEffect, useMemo } from 'react';\nimport { deleteComment, getCommentsPost } from '../api';\nimport { GlobalContext } from '../reducer';\nimport { Comment } from '../types/Comment';\nimport { Error } from '../types/Error';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\nexport const PostDetails: React.FC = () => {\n  const [state, dispatch] = useContext(GlobalContext);\n\n  const getComments = (id: number) => {\n    getCommentsPost(id)\n      .then((request: Comment[] | Error) => {\n        if ('error' in request) {\n          dispatch({\n            type: 'error',\n            error: { ...request, type: 'comments' },\n          });\n          dispatch({\n            type: 'loadData',\n            objectLoad: { type: 'comments', active: false },\n          });\n        } else {\n          dispatch({ type: 'commentsPost', comments: request as Comment[] });\n          dispatch({\n            type: 'loadData',\n            objectLoad: { type: 'comments', active: false },\n          });\n        }\n      });\n  };\n\n  useEffect(() => {\n    if (state.selectedPost) {\n      dispatch({\n        type: 'loadData',\n        objectLoad: { type: 'comments', active: true },\n      });\n      getComments(state.selectedPost.id);\n    }\n  }, [state.selectedPost]);\n\n  const deleteCommentHandler = (id:number) => {\n    deleteComment(id).then(() => {\n      if (state.selectedPost) {\n        dispatch({\n          type: 'commentsPost',\n          comments: state.commentsPost.filter((el: Comment) => el.id !== id),\n        });\n      }\n    });\n  };\n\n  const renderCommentForm = useMemo(() => {\n    return !state.activeForm ? (\n      <button\n        data-cy=\"WriteCommentButton\"\n        type=\"button\"\n        className=\"button is-link\"\n        onClick={() => dispatch({ type: 'activeForm', active: true })}\n      >\n        Write a comment\n      </button>\n    ) : <NewCommentForm getComments={getComments} />;\n  }, [state.activeForm]);\n\n  const renderListComments = useMemo(() => {\n    return (\n      <>\n        <p className=\"title is-4\">Comments:</p>\n        {state.commentsPost.length < 1 && (\n          <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n            No comments yet\n          </p>\n        )}\n        {state.commentsPost.map((comment: Comment) => {\n          return (\n            <article\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n              key={comment.id}\n            >\n              <div className=\"message-header\">\n                <a\n                  href={`mailto:${comment.email}`}\n                  data-cy=\"CommentAuthor\"\n                >\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => deleteCommentHandler(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          );\n        })}\n        {state.error?.type === 'comments' && (\n          <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n            Something went wrong\n          </div>\n        )}\n      </>\n    );\n  }, [state.error, state.commentsPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"block\">\n        <h2 data-cy=\"PostTitle\">\n          {`#${state.selectedPost?.id}: ${state.selectedPost?.title}`}\n        </h2>\n\n        <p data-cy=\"PostBody\">\n          {state.selectedPost?.body}\n        </p>\n      </div>\n\n      <div className=\"block\">\n        {state.load.type === 'comments' && state.load.active\n          ? <Loader />\n          : renderListComments}\n      </div>\n\n      {renderCommentForm}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, {\n  useEffect, useMemo, useState, useContext,\n} from 'react';\nimport { getUsersList } from '../api';\nimport { GlobalContext } from '../reducer';\nimport { Error } from '../types/Error';\nimport { User } from '../types/User';\n\nexport const UserSelector: React.FC = () => {\n  const [listUsers, setListUsers] = useState<User[] | []>([]);\n  const [state, dispatch] = useContext(GlobalContext);\n\n  useEffect(() => {\n    getUsersList().then((request: User[] | Error) => {\n      if ('error' in request) {\n        dispatch({ type: 'error', error: { ...request, type: 'listUsers' } });\n      } else {\n        setListUsers(request);\n      }\n    });\n  }, []);\n\n  const selectUser = (user: User) => {\n    if (user !== state.selectedUser) {\n      dispatch({ type: 'selectUser', user });\n      dispatch({ type: 'postsUser', posts: [] });\n      dispatch({ type: 'error', error: null });\n      dispatch({ type: 'selectPost', post: null });\n    }\n\n    dispatch({ type: 'active', show: false });\n  };\n\n  const renderListUsers = useMemo(() => {\n    return listUsers.map((user: User) => {\n      return (\n        <a\n          href={`#user-${user.id}`}\n          className={classNames('dropdown-item', {\n            'is-active': state.selectedUser === user,\n          })}\n          key={user.id}\n          onClick={() => selectUser(user)}\n        >\n          {user.name}\n        </a>\n      );\n    });\n  }, [listUsers, state.selectedUser]);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': state.activeList,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => dispatch({ type: 'active', show: !state.activeList })}\n        >\n          <span>\n            {state.selectedUser\n              ? state.selectedUser.name\n              : 'Choose a user'}\n\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {renderListUsers}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { GlobalContext } from './reducer';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [state, dispatch] = useContext(GlobalContext);\n\n  const closeDrobdownMenu = (event: any) => {\n    if (event.target.parentNode) {\n      if (\n        event.target.parentNode.className !== 'button'\n        && event.target.parentNode.className !== 'icon is-small'\n        && event.target.parentNode.className !== 'dropdown-trigger'\n      ) {\n        dispatch({ type: 'active', show: false });\n      }\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', closeDrobdownMenu);\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!state.selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {(state.load.type === 'postsUser' && state.load.active)\n                  && <Loader />}\n\n                {state.error?.type === 'listPosts' && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(state.load.type === 'postsUser'\n                  && !state.load.active\n                  && state.listPostsUser.length < 1\n                && state.error?.type !== 'listPosts') && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                <PostsList />\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': state.selectedPost },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {state.selectedPost && <PostDetails />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport StateProvider from './reducer';\n\nReactDOM.render(\n  <StateProvider>\n    <App />\n  </StateProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}